#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
"""
import os
import hashlib
from pathlib import Path
from collections import defaultdict

def find_duplicate_content():
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã —Å –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º"""
    print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")

    obsidian_root = Path("/Users/kirilltitov/Documents/Obsidian Vault")
    file_hashes = defaultdict(list)

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º .md —Ñ–∞–π–ª–∞–º
    for md_file in obsidian_root.rglob("*.md"):
        if "Templates" in md_file.parts or "backups" in md_file.parts:
            continue

        try:
            with open(md_file, 'r', encoding='utf-8') as f:
                content = f.read()

            # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
            content_hash = hashlib.md5(content.encode('utf-8')).hexdigest()
            file_hashes[content_hash].append(md_file)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {md_file}: {e}")

    # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = []
    for hash_value, files in file_hashes.items():
        if len(files) > 1:
            duplicates.append((hash_value, files))

    if duplicates:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
        for hash_value, files in duplicates:
            print(f"\n–•—ç—à: {hash_value}")
            for file_path in files:
                print(f"  {file_path}")
    else:
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    return duplicates

def find_similar_files():
    """–ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
    print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏...")

    obsidian_root = Path("/Users/kirilltitov/Documents/Obsidian Vault")
    file_names = defaultdict(list)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    for md_file in obsidian_root.rglob("*.md"):
        if "Templates" in md_file.parts or "backups" in md_file.parts:
            continue

        file_names[md_file.name].append(md_file)

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ –∏–º–µ–Ω–∞
    similar = []
    for name, files in file_names.items():
        if len(files) > 1:
            similar.append((name, files))

    if similar:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(similar)} –≥—Ä—É–ø–ø —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏:")
        for name, files in similar:
            print(f"\n–§–∞–π–ª: {name}")
            for file_path in files:
                print(f"  {file_path}")
    else:
        print("‚úÖ –§–∞–π–ª–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    return similar

def find_empty_files():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã"""
    print("üîç –ü–æ–∏—Å–∫ –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤...")

    obsidian_root = Path("/Users/kirilltitov/Documents/Obsidian Vault")
    empty_files = []

    for md_file in obsidian_root.rglob("*.md"):
        if "Templates" in md_file.parts or "backups" in md_file.parts:
            continue

        try:
            if md_file.stat().st_size == 0:
                empty_files.append(md_file)
        except:
            pass

    if empty_files:
        print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(empty_files)} –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for file_path in empty_files:
            print(f"  {file_path}")
    else:
        print("‚úÖ –ü—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    return empty_files

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")

    duplicates = find_duplicate_content()
    similar = find_similar_files()
    empty = find_empty_files()

    print("\nüìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    print(f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(duplicates)} –≥—Ä—É–ø–ø")
    print(f"–ü–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: {len(similar)} –≥—Ä—É–ø–ø")
    print(f"–ü—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(empty)}")

    if duplicates or similar or empty:
        print("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        return 1
    else:
        print("\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return 0

if __name__ == "__main__":
    exit(main())
